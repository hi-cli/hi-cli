#!/bin/bash
###############################################################################
# Project: hi-cli
# Description: The cross platform development toolkit - hi-cli
# Author: John Deng (john.deng@outlook.com)
#
# Copyright (c) 2014-2017 John Deng (john.deng@outlook.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Author: John Deng (john.deng@outlook.com)
# Updated: 2017-02-11
###############################################################################

source "${HI_CLI_HOME}/bin/colors"

function prompt_yesorno ()
{
    while true; do
        ${ECHO_E} "${YELLOW}"
        read -p "[hi-cli] $1 " yn < /dev/tty
        ${ECHO_E} "${ENDCOLOR}"
        case $yn in
            [Yy]* ) return 0;;
            [Nn]* ) return 1;;
            * ) echo "Please answer yes or no.";;
        esac
    done
}

function get_file_from_path() {
    src=$2
    eval $1="${src##*/}"
}

function get_folder_from_path() {
    src=$2
    eval $1="${src##*/}"
}

function get_dir_from_path() {
    src="$2"
    eval $1="\${src%/*}"
}

function is_function() {
    #if type "$1" | grep -q '^function$' 2>/dev/null; then
    if [ $(type "$1" | grep "function" | wc -l) != 0 ]; then
        echo "yes"
    else
        echo "no"
    fi
    
}

function get_url_status() {
    response=$(curl -IL "$1")
    status_code=$(echo $response | grep Status)
    echo ${status_code/Status: /}
}

function is_url_available() {
    if [ $(get_url_status $1 | grep '200' | wc -l) != 0 ]; then
        echo "yes"
    else
        echo "no"
    fi
}

function is_connected() {
    host=$1
    port=$2
    res=$(echo $(telnet ${host} ${port} &) | grep "Escape character is '^]'." | wc -l)
    [ ${res} == 1 ] && echo "yes" || echo "no"
}

function find_modules() {
    file_extension="$2"
    log_debug "find_modules in $PWD, file_extension: ${file_extension}"
    result=$(find . -maxdepth 2 -name "${file_extension}" | { while read module; do
                
                module=${module%:*}
                module=${module/.\//}
                module=${module/\/${file_extension}/}
                if [ "${unlimited}" == "unlimited" ] || [ $(echo "${module}" | grep "\/" | wc -l) == 0 ]; then
                    echo ${SPACE}${module}
                fi
            done
    })
    
    # log_debug "result: ${result}"
    
    eval " $1="'"'"$result"'"'" "
}

trim() {
    local var="$*"
    # remove leading whitespace characters
    var="${var#"${var%%[![:space:]]*}"}"
    # remove trailing whitespace characters
    var="${var%"${var##*[![:space:]]}"}"
    echo -n "${var}"
}

function menu() {
    for i in ${!_options[@]}; do
        printf "%3d%s) %s\n" $((i+1)) "${choices[i]:- }" "${_options[i]}"
    done
    [[ "${msg}" ]] && echo "${msg}"; :
}

function selection() {
    _options=($2)
    _prompt=$3
    _mode=$4
    
    unset choices # unset array choices, otherwise it will remember last values
    while menu && read -rp "${_prompt}" num && [[ "$num" ]]; do
        [[ "$num" != *[![:digit:]]* ]] &&
        (( num > 0 && num <= ${#_options[@]} )) ||
        { msg="Invalid option: $num"; continue; }
        ((num--)); msg="${_options[num]} was ${choices[num]:+un}checked, hit enter to confirm"
        [[ "${choices[num]}" ]] && choices[num]="" || choices[num]="+"
        
        if [[ "${choices[num]}" ]] && [ "${_mode}" == "single" ]; then
            break
        fi
    done
    result=""
    printf "${GREEN}You selected: ${ENDCOLOR} ${DARKGREEN}"; msg=" nothing"
    for i in ${!_options[@]}; do
        if [[ "${choices[i]}" ]]; then
            printf " %s" "${_options[i]}"
            msg=""
            result="${result} ${_options[i]}"
        fi
    done
    printf "${ENDCOLOR}"
    echo ${msg}
    
    eval  $1="\${result}"
}
